{
  "htmlElements": {
    "tags": [
      "a",
      "abbr",
      "article",
      "blockquote",
      "body",
      "br",
      "button",
      "circle",
      "cite",
      "code",
      "defs",
      "details",
      "div",
      "ellipse",
      "em",
      "footer",
      "g",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hr",
      "html",
      "iframe",
      "img",
      "input",
      "kbd",
      "li",
      "line",
      "lineargradient",
      "link",
      "main",
      "mark",
      "meta",
      "ol",
      "p",
      "path",
      "polygon",
      "polyline",
      "pre",
      "rect",
      "script",
      "section",
      "span",
      "stop",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "svg",
      "table",
      "tbody",
      "td",
      "th",
      "thead",
      "title",
      "tr",
      "ul"
    ],
    "classes": [
      "__h_video",
      "absolute",
      "active",
      "bg-gray-100",
      "bg-pink-50",
      "bg-white",
      "border",
      "border-transparent",
      "bottom-44",
      "canon",
      "capitalize",
      "close-search",
      "container",
      "cursor-pointer",
      "dark:bg-gray-700",
      "dark:bg-gray-800",
      "dark:bg-gray-900",
      "dark:border-transparent",
      "dark:hover:border-gray-300",
      "dark:hover:text-gray-300",
      "dark:hover:text-white",
      "dark:prose-dark",
      "dark:text-black",
      "dark:text-gray-400",
      "dark:text-gray-600",
      "dark:text-gray-800",
      "dark:text-white",
      "disabled",
      "emojify",
      "flex",
      "flex-1",
      "flex-col",
      "flex-wrap",
      "font-bold",
      "font-extrabold",
      "font-light",
      "font-medium",
      "font-semibold",
      "footnote-backref",
      "footnote-ref",
      "footnotes",
      "gap-4",
      "gap-x-3",
      "gap-y-2",
      "grid",
      "grid-cols-1",
      "h-52",
      "h-8",
      "h-full",
      "hidden",
      "highlight",
      "hover:bg-gray-200",
      "hover:border-gray-800",
      "hover:text-gray-800",
      "hover:text-gray-900",
      "icon",
      "icon-tabler",
      "icon-tabler-brand-behance",
      "icon-tabler-brand-dribbble",
      "icon-tabler-brand-facebook",
      "icon-tabler-brand-googlescholar",
      "icon-tabler-brand-instagram",
      "icon-tabler-brand-stackoverflow",
      "icon-tabler-brand-telegram",
      "icon-tabler-brand-tiktok",
      "icon-tabler-brand-xda",
      "icon-tabler-brand-youtube",
      "icon-tabler-chevron-down",
      "inline-block",
      "items-center",
      "items-end",
      "justify-between",
      "justify-center",
      "left-0",
      "lg:gap-16",
      "lg:gap-6",
      "lg:gap-8",
      "lg:grid-cols-3",
      "lg:prose-lg",
      "max-w-100ch",
      "max-w-3xl",
      "max-w-4xl",
      "max-w-5xl",
      "max-w-6xl",
      "max-w-full",
      "max-w-screen-lg",
      "mb-2",
      "mb-4",
      "mb-8",
      "md:flex",
      "md:flex-row",
      "md:grid-cols-2",
      "md:hidden",
      "md:items-center",
      "md:justify-between",
      "md:p-0",
      "md:relative",
      "md:w-auto",
      "min-h-screen",
      "mobile-menu",
      "mobile-menu-button",
      "mr-1",
      "mt-16",
      "mt-2",
      "mt-4",
      "mx-1",
      "mx-auto",
      "my-2",
      "my-4",
      "my-8",
      "no-results",
      "nowrap",
      "object-contain",
      "object-cover",
      "opacity-60",
      "open-search",
      "p-1",
      "p-12",
      "p-2",
      "p-6",
      "page-item",
      "page-link",
      "pagination",
      "pagination-default",
      "pb-4",
      "pb-6",
      "place-items-center",
      "play",
      "prose",
      "pt-6",
      "px-2",
      "px-3",
      "px-4",
      "px-6",
      "px-8",
      "py-0.5",
      "py-12",
      "py-2",
      "py-3",
      "py-32",
      "py-4",
      "relative",
      "right-0",
      "right-4",
      "right-8",
      "rotate-6",
      "rounded",
      "rounded-full",
      "rounded-lg",
      "s_video_simple",
      "search-list",
      "search-results",
      "search-ui",
      "select-none",
      "shadow",
      "shadow-sm",
      "text-2xl",
      "text-3xl",
      "text-4xl",
      "text-black",
      "text-center",
      "text-gray-500",
      "text-gray-800",
      "text-gray-900",
      "text-lg",
      "text-sm",
      "text-white",
      "text-xl",
      "toc",
      "toggle-dark-mode",
      "top-0",
      "top-4",
      "top-full",
      "transform",
      "transition-colors",
      "twitter-tweet",
      "w-1/2",
      "w-full",
      "z-10"
    ],
    "ids": [
      "-内容",
      "-启动方式",
      "-地址",
      "1-debugging",
      "1-下载依赖",
      "1-下载包",
      "1-下载包-1",
      "1-下载包-2",
      "1-下载包-3",
      "1-下载字体图标文件",
      "1-同步-loader",
      "1-多入口",
      "1-文件目录",
      "1-最简单的-loader",
      "1-资源目录",
      "1-配置",
      "1-配置文件",
      "1-配置文件-1",
      "1-静态资源代理动静分离",
      "12-静态资源代理",
      "13-代理服务器正向代理http-服务器",
      "14-正向代理和反向代理的区别",
      "1jenkins镜像",
      "2-loader-接受的参数",
      "2-security",
      "2-修改-indexhtml",
      "2-修改-webpackdevjs",
      "2-具体配置",
      "2-具体配置-1",
      "2-创建文件",
      "2-功能介绍",
      "2-功能介绍-1",
      "2-功能介绍-2",
      "2-功能介绍-3",
      "2-反向代理-reverse-proxyhttp-反向代理服务转发",
      "2-异步-loader",
      "2-提取重复代码",
      "2-添加图片资源",
      "2-添加字体图标资源",
      "2-运行指令",
      "2-配置",
      "2-配置-1",
      "2-配置-2",
      "21-原理",
      "22-反向代理作用",
      "23-反向代理-实战",
      "2安装",
      "3-raw-loader",
      "3-下载依赖",
      "3-使用图片资源",
      "3-修改-indexhtml",
      "3-修改-webpackprodjs",
      "3-在-webpack-中使用",
      "3-在-webpack-中使用-1",
      "3-按需加载动态导入",
      "3-控制兼容性",
      "3-运行指令",
      "3-运行指令-1",
      "3-配置",
      "3-配置-1",
      "3-配置-2",
      "3-配置-3",
      "31-websocket",
      "32-http2",
      "3配置jenkins",
      "3高级配置",
      "4-pitching-loader",
      "4-vscode-eslint-插件",
      "4-单入口",
      "4-合并配置",
      "4-启用-webpack",
      "4-添加-css-资源",
      "4-添加-less-资源",
      "4-添加-sass-资源",
      "4-添加-styl-资源",
      "4-跨域",
      "4-运行指令",
      "4-配置运行指令",
      "41-常见跨域情况",
      "42-nginx跨域-实战",
      "5-大核心概念",
      "5-更新配置",
      "5-观察输出文件",
      "5-输出资源情况",
      "5-运行指令",
      "5-运行指令-1",
      "5-运行指令-2",
      "5-运行指令-3",
      "50000端口slave节点与jenkins的通讯端口",
      "6-对图片资源进行优化",
      "6-给动态导入文件取名称",
      "8080端口jenkins服务对外暴露的地址",
      "TableOfContents",
      "a",
      "actions-通信",
      "analyzewebpackplugin",
      "babel",
      "bannerwebpackplugin",
      "blockquote-with-attribution",
      "blockquote-without-attribution",
      "blockquotes",
      "cache",
      "challenges-and-considerations",
      "cicd-demo",
      "cicd中的cd指的是持续交付continuous-delivery持续部署continuous-deployment它们是有时可以互换使用的相关概念两者都是关于自动化流水线的进一步阶段但有时会单独使用它们来说明正在发生的自动化程度",
      "cicd是一种通过将自动化引入应用程序开发阶段来频繁向客户交付应用程序的方法cicd的主要概念是持续集成持续交付和持续部署cicd是解决集成新代码可能给开发和运营团队带来的问题又名集成地狱的解决方案",
      "cicd是什么",
      "cicd管道代表什么",
      "cicd管道是一种集成自动化工具和工作流程的部署管道旨在实现代码的频繁更改自动化测试持续集成和快速交付通过cicd管道开发团队可以在更短的时间内交付高质量的软件产品提高开发效率和产品质量",
      "cicd管道阶段",
      "cleaning-up-your-stash",
      "cleanwebpackplugin",
      "code-block-indented-with-four-spaces",
      "code-block-with-backticks",
      "code-block-with-hugos-internal-highlight-shortcode",
      "code-blocks",
      "code-split",
      "comparing-files-between-two-different-commits",
      "comparing-files-from-two-branches",
      "comparing-files-git-diff-file",
      "comparing-two-branches",
      "compilation",
      "compile-and-hot-reload-for-development",
      "compiler",
      "conclusion",
      "cookie数据共享",
      "core-js",
      "css-兼容性处理",
      "css-压缩",
      "css-处理",
      "customize-configuration",
      "dashboard--系统管理--全局工具配置--nodejs-安装",
      "dashboard--系统管理--系统配置--publish-over-ssh--ssh-servers",
      "demo-项目",
      "disadvantages--challenges",
      "docker-buildx-打包镜像",
      "docker-pull-jenkinsjenkins",
      "docker-run---name-jenkins_test--d--p-80818080--p-5000150000-jenkinskenkins",
      "docker-search-jenkins",
      "docker-基本概念",
      "dockerfile-常用指令",
      "docker部署jenkins",
      "dsl--开发套件",
      "dsl--开发套件-1",
      "emscripten-environment-setup",
      "eslint",
      "examples",
      "fn:1",
      "fnref:1",
      "getting-started",
      "gitlab-runner",
      "grpc-web-分享",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "heading",
      "headings",
      "hello-world",
      "hotmodulereplacement",
      "html-压缩",
      "http-request",
      "hubdockercomhttpshubdockercom官方的镜像仓库",
      "iframe-的优缺点",
      "image-minimizer",
      "includeexclude",
      "inline-markdown-within-tables",
      "inlinechunkwebpackplugin",
      "introduction",
      "job",
      "jsx",
      "lint-with-eslinthttpseslintorg",
      "list-types",
      "loader-api",
      "loader-分类",
      "loader-原理",
      "loader-执行顺序",
      "loader-概念",
      "managing-multiple-stashes",
      "mane-refeci-capiebant-unda-mulcebat",
      "mock",
      "nested-list",
      "network-cache",
      "nginx-安装及启动",
      "nginx-定义及作用",
      "nginx-配置-http2-实战",
      "nginx-配置-websocket-实战",
      "nginx配置",
      "node前端环境",
      "oneof",
      "ordered-list",
      "other-elements--abbr-sub-sup-kbd-mark",
      "paragraph",
      "plugin-原理",
      "plugin-工作原理",
      "plugin-构建对象",
      "plugin-的作用",
      "preload--prefetch",
      "project-setup",
      "publish-over-ssh连接linux机器远程传输文件及执行shell命令",
      "pwa",
      "qiankun-的优缺点",
      "re-applying-your-stashed-changes",
      "react-nativehttpsreactnativedev",
      "react-脚手架",
      "reading-diffs-output",
      "recommended-ide-setup",
      "resources",
      "run-end-to-end-tests-with-cypresshttpswwwcypressio",
      "run-unit-tests-with-vitesthttpsvitestdev",
      "shared-通信",
      "sourcemap",
      "squashing-commits",
      "stages",
      "stashing-untracked-or-ignored-files",
      "stashing-your-work",
      "tables",
      "tapable",
      "tarohttpsdocstarozonedocs",
      "thead",
      "tree-shaking",
      "twitter-simple-shortcode",
      "type-check-compile-and-minify-for-production",
      "type-support-for-vue-imports-in-ts",
      "unordered-list",
      "v-model",
      "vagus-elidunt",
      "viewing-stash-diffs",
      "vimeo-simple-shortcode",
      "vue-脚手架",
      "web",
      "webassembly-goals",
      "webpack-内部的钩子",
      "webpack-原理",
      "wex通信",
      "what-is-webassembly",
      "workflow",
      "workflowrules",
      "youtube-privacy-enhanced-shortcode",
      "一些命令其实就是一些行为的集合",
      "中期阶段",
      "为什么",
      "为什么-1",
      "为什么-2",
      "为什么-3",
      "为什么-4",
      "为什么使用-vitest",
      "为什么要使用-git-rebase",
      "为什么要进行-e2e-测试",
      "为什么需要打包工具",
      "主要用途",
      "事件",
      "什么是-cypress",
      "什么是-e2e-测试",
      "什么是跨端技术",
      "什么是钩子",
      "介绍",
      "优化代码运行性能",
      "优化配置",
      "优缺点",
      "使用",
      "使用-git-rebase-最佳实践",
      "使用版本控制系统如git管理源代码便于团队成员协同工作和版本控制",
      "依赖树",
      "依赖环境",
      "修改上一个-commit-的描述",
      "修改输出资源的名称和路径",
      "修改运行中的容器的端口的方法",
      "修改配置文件",
      "其他配置",
      "准备-webpack-配置文件",
      "减少代码体积",
      "创建-gitlab-ciyml",
      "创建任务",
      "初始化",
      "判断是否渲染",
      "前端的-dockerfile-一般怎么写",
      "前置知识",
      "前言",
      "功能介绍",
      "单元测试从测试工具方法开始",
      "原生模块",
      "参考",
      "合并开发和生产配置",
      "合成最终输出文件-bundle",
      "后期阶段",
      "启动容器",
      "启动调试",
      "在ci中的构建和单元和集成测试自动化之后持续交付会自动将经过验证的代码发布到存储库因此为了有一个有效的持续交付过程ci已经内置到您的开发管道中是很重要的持续交付的目标是拥有一个始终准备好部署到生产环境的代码库",
      "在实践中持续部署意味着开发人员对云应用程序的更改可以在编写后几分钟内生效假设它通过了自动化测试这使得持续接收和整合用户反馈变得更加容易总而言之所有这些连接的-cicd-实践降低了应用程序部署的风险从而更容易以小块的形式发布对应用程序的更改而不是一次全部发布不过也有很多前期投资因为需要编写自动化测试以适应-cicd-管道中的各种测试和发布阶段",
      "在持续交付中从合并代码更改到交付生产就绪版本的每个阶段都涉及测试自动化和代码发布自动化在该过程结束时运营团队能够快速轻松地将应用程序部署到生产环境",
      "在现代应用程序开发中目标是让多个开发人员同时开发同一个应用程序的不同功能但是如果一个组织被设置为在某一天合并日将所有分支源代码合并在一起那么最终的工作可能是乏味的手动的和耗时的这是因为当一个单独工作的开发人员对应用程序进行更改时它可能会与其他开发人员同时进行的不同更改发生冲突如果每个开发人员都定制了他们自己的本地集成开发环境ide而不是团队就一个基于云的-ide-达成一致这个问题可能会更加复杂",
      "基于-url-的通信",
      "基本使用",
      "基本技术原理",
      "基本操作",
      "基本语法",
      "基本配置",
      "处理-css-资源",
      "处理-html-资源",
      "处理-js-资源",
      "处理-less-资源",
      "处理-sass-和-scss-资源",
      "处理-styl-资源",
      "处理其他资源",
      "处理图片资源",
      "处理字体图标资源",
      "处理样式资源",
      "复杂配置",
      "如何使用-cypress",
      "如何使用-git-rebase",
      "学习资料",
      "安装",
      "安装配置",
      "将覆盖更多的终端-iot-方向前景",
      "小结",
      "展示工作区和暂存区的不同",
      "展示暂存区和最近版本的不同",
      "展示暂存区工作区和最近版本的不同",
      "常用命令",
      "常见场景",
      "常见的-babel-模块",
      "常见的loader",
      "开发一个-loader",
      "开发一个插件",
      "开发服务器自动化",
      "开发模式介绍",
      "开发模式配置",
      "开始使用",
      "开始前我们先了解一下会用到的-api",
      "微前端优点",
      "微前端缺点",
      "怎么用",
      "怎么用-1",
      "怎么用-2",
      "怎么用-3",
      "怎么用-4",
      "总结",
      "成熟的-cicd-管道的最后阶段是持续部署作为持续交付的扩展它可以自动将生产就绪的构建发布到代码存储库持续部署可以自动将应用程序发布到生产环境因为在生产前的流水线阶段没有人工门持续部署在很大程度上依赖于精心设计的测试自动化",
      "我们找一个组件库中的工具方法",
      "我能学到什么",
      "手写-babel-loader",
      "手写-banner-loader",
      "手写-clean-log-loader",
      "手写-file-loader",
      "手写-style-loader",
      "执行-rebase-之前自动-stash",
      "技术架构",
      "技术架构-1",
      "拷贝容器资源",
      "持续交付cd",
      "持续交付通常意味着开发人员对应用程序的更改会自动进行错误测试并上传到存储库如-github-或容器注册表然后运维团队可以将它们部署到实时生产环境中这是对开发团队和业务团队之间可见性和沟通不佳问题的解决方案为此持续交付的目的是确保以最少的努力部署新代码",
      "持续继承ci",
      "持续部署cd",
      "持续部署另一种可能的cd可以指自动将开发人员的更改从存储库发布到生产环境供客户使用它解决了频繁的应用程序人工部署使运维团队超载的问题它通过自动化管道中的下一阶段来构建持续交付的优势",
      "持续集成ci-帮助开发人员更频繁地将他们的代码更改合并回共享分支或主干有时甚至每天合并开发人员对应用程序的更改后将通过自动构建应用程序并运行不同级别的自动化测试通常是单元测试和集成测试来验证这些更改以确保更改不会破坏应用程序这意味着测试从类和函数到构成整个应用程序的不同模块的所有内容如果自动化测试发现新代码和现有代码之间存在冲突ci可以更轻松地快速频繁地修复这些错误",
      "接口请求mock-数据",
      "控制台命令获取",
      "提升开发体验",
      "提升打包构建速度",
      "提取-css-成单独文件",
      "插件",
      "插件dashboard--系统管理--插件管理--available-plugins",
      "搭建jenkins平台",
      "方案横向对比",
      "早期阶段",
      "映射-nginx-目录",
      "映射到本地目录",
      "是什么",
      "是什么-1",
      "是什么-2",
      "是什么-3",
      "是什么-4",
      "更多中大型-app-支持小程序形态",
      "最后一步packagejson-中配置单元测试命令",
      "最简单的插件",
      "有哪些打包工具",
      "构建",
      "架构升级",
      "查找节点",
      "查看-nginx-容器的配置资源目录",
      "查看-pipeline-和-job-的状态",
      "查看冲突文件列表",
      "查看密码cat-varjenkins_homesecretsinitialadminpassword",
      "查询容器iddocker-ps--a",
      "案例",
      "桌面端小程序",
      "注册-hook",
      "注册一个-runner",
      "注重更高的性能",
      "测试",
      "测试-vue-项目中的组件",
      "测试输入的-props",
      "清单",
      "源代码管理",
      "理解-rebase-命令",
      "生产模式介绍",
      "生产模式准备",
      "生产模式配置",
      "生命周期简图",
      "监控与反馈",
      "确认-runner-可用",
      "第一步安装依赖",
      "第一部分全局块",
      "第三部分http-块",
      "第二步配置-viteconfigts",
      "第二部分events-块",
      "简介",
      "简介-1",
      "简单配置",
      "自动化测试框架和工具用于执行单元测试集成测试和端到端测试确保软件质量",
      "自动化部署工具如docker将构建好的软件包部署到生产环境或其他环境",
      "自动清空上次打包资源",
      "表单输入与提交",
      "解锁",
      "触发事件",
      "访问远程链接",
      "请求接口",
      "跨端技术发展史",
      "跨端技术简介",
      "跨端框架介绍",
      "跨端的发展猜想",
      "运行",
      "进入容器docker-exec--it-contaniner-id-bash",
      "适合群体",
      "通过监控工具和日志收集系统如grafana对应用程序性能和环境状态进行实时监控及时发现问题并进行调整",
      "通过自动化工具如jenkins对源代码进行编译打包和测试确保代码质量",
      "部署",
      "配置-gitlab-ciyml",
      "配置-location-块",
      "配置完成可以点击右下角的test-confirguration测试连接左下角出现success则说明配置成功点击保存",
      "非docker部署jenkins需要保留8080端口和50000端口",
      "首先我们会遇到几个问题",
      "首字母缩略词-cicd有几个不同的含义cicd中的ci总是指持续集成它是开发人员的自动化过程成功的ci意味着对应用程序的新代码更改会定期构建测试并合并到共享存储库这是解决同时开发的应用程序有太多分支可能相互冲突的问题的解决方案"
    ]
  }
}
